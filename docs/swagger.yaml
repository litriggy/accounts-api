basePath: /api
definitions:
  model.AddHardWallet:
    description: 개인 키로 지갑 등록 request Body struct
    properties:
      privateKey:
        example: ex) 027737b5....
        type: string
      secPw:
        example: ex) 000000
        type: string
      walletType:
        example: ex) eth, sol, bit, apt
        type: string
    type: object
  model.AddSecondPass:
    properties:
      secPw:
        type: string
    type: object
  model.AddSoftWallet:
    description: 서명으로 지갑 등록 request Body struct
    properties:
      salt:
        example: ex) 165....
        type: string
      signature:
        example: ex) 0x00...
        type: string
      walletAddr:
        example: ex) 0x00...
        type: string
      walletType:
        example: ex) kaikas, metamask
        type: string
    type: object
  model.OffTransactionDetail:
    properties:
      amount:
        type: integer
      to:
        type: string
    type: object
  model.OnTransactionDetail:
    properties:
      amount:
        description: example:"수량 wei 단위로 작성"`
        type: integer
      from:
        description: example:"보낼 db에 기록된 지갑 주소"`
        type: string
      to:
        description: example:"대상 지갑 주소"`
        type: string
      txhash:
        description: example:"pk 보관 중이지 않은 지갑 일 경우 필수 아님" require:"false"`
        type: string
    type: object
  model.RECVTransfer:
    properties:
      offChainEvent:
        allOf:
          - $ref: "#/definitions/model.OffTransactionDetail"
        description: example:"장부거래"`
      onChainEvents:
        description: example:"블록체인 거래"`
        items:
          $ref: "#/definitions/model.OnTransactionDetail"
        type: array
      secPw:
        description: example:"2차 비밀번호"`
        type: string
      serviceId:
        description: example:"서비스 Id 값"`
        type: integer
      to:
        description: example:"송금 대상 유저 Id 값"`
        type: integer
    type: object
  model.SignIn:
    description: 로그인/회원가입 request Body struct
    properties:
      accessToken:
        type: string
    type: object
host: 43.201.113.207:3000
info:
  contact: {}
  description:
    계정계 API 서버 입니다. session 키 활용 데이터 확인, 업데이트 시 헤더 authorization 키 값으로
    재발급된 세션키를 확인할 수 있습니다.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Accounts API
  version: "1.0"
paths:
  /v1/auth/check:
    get:
      consumes:
        - application/json
      description: 세션키를 확인하여 유저 정보를 반환 및 세션키를 재생성합니다.
      parameters:
        - description: 액세스 토큰
          in: header
          name: Authorization
          required: true
          type: string
      produces:
        - application/json
      responses: {}
      summary: 세션키 확인
      tags:
        - Auth
  /v1/auth/signin/{type}/{version}:
    post:
      consumes:
        - application/json
      description: 소셜 로그인으로 로그인 혹은 회원가입을 진행합니다. 계정 생성이면 201, 로그인이면 200을 리턴합니다.
      parameters:
        - description: "소셜 로그인 종류 (ex: google, apple)"
          in: path
          name: type
          required: true
          type: string
        - description: "소셜 로그인 버전 웹사이트: 1, 확장앱: 2"
          in: path
          name: version
          required: true
          type: string
        - description: 소셜 로그인 측에서 제공한 access token
          in: body
          name: accessToken
          required: true
          schema:
            $ref: "#/definitions/model.SignIn"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      summary: 로그인/회원가입
      tags:
        - Auth
  /v1/info/services:
    get:
      consumes:
        - application/json
      description: 서비스 리스트 API 입니다.
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      summary: 서비스 리스트 API
      tags:
        - Info
  /v1/tx/history:
    get:
      consumes:
        - application/json
      description: 거래내역 조회 API 입니다. 상세 거래내역 조회를 통해 상세 내역을 확인할 수 있습니다.
      parameters:
        - description: 액세스 토큰
          in: header
          name: Authorization
          required: true
          type: string
        - description: 조회 limit
          in: query
          name: lim
          type: string
        - description: 조회 offset
          in: query
          name: "off"
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      summary: 거래내역 조회 API
      tags:
        - Transaction
  /v1/tx/history/detail/{id}:
    get:
      consumes:
        - application/json
      description: 거래내역 상세 조회 API 입니다. 상세 거래내역 조회를 통해 상세 내역을 확인할 수 있습니다.
      parameters:
        - description: 트랜잭션 ID 값
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      summary: 거래내역 상세 조회 API
      tags:
        - Transaction
  /v1/tx/transfer:
    post:
      consumes:
        - application/json
      description: 온/오프체인 송금 API 입니다. 온/오프체인 기록을 전송하고 싶을 경우 body에 추가.
      parameters:
        - description: 액세스 토큰
          in: header
          name: Authorization
          required: true
          type: string
        - description: 송금 시도 시 필요한 body 값
          in: body
          name: wallet
          required: true
          schema:
            $ref: "#/definitions/model.RECVTransfer"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      summary: 온/오프체인 송금 API
      tags:
        - Transaction
  /v1/user/myinfo:
    get:
      consumes:
        - application/json
      description: 내 정보 조회 API 입니다.
      parameters:
        - description: 액세스 토큰
          in: header
          name: Authorization
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      summary: 내 정보 조회 API
      tags:
        - User
  /v1/user/balance:
    get:
      consumes:
        - application/json
      description: 잔고 조회 API 입니다.
      parameters:
        - description: 액세스 토큰
          in: header
          name: Authorization
          required: true
          type: string
        - description: 조회 대상 id 쉼표로 구분합니다. ex) 1, 2, 3
          in: query
          name: services[]
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      summary: 오프체인 특정 서비스들의 잔고 조회 API
      tags:
        - User
  /v1/user/secondpass:
    post:
      consumes:
        - application/json
      description: 2차 비밀번호 (평문)을 받아 해싱 후 저장합니다.
      parameters:
        - description: 액세스 토큰
          in: header
          name: Authorization
          required: true
          type: string
        - description: 2차 비밀번호
          in: body
          name: secondPass
          required: true
          schema:
            $ref: "#/definitions/model.AddSecondPass"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      summary: 2차 비밀번호 등록 API
      tags:
        - User
  /v1/user/service/{serviceId}:
    post:
      consumes:
        - application/json
      description: 서비스 추가 API 입니다.
      parameters:
        - description: 액세스 토큰
          in: header
          name: Authorization
          required: true
          type: string
        - description: 추가 대상 서비스 id
          in: path
          name: serviceId
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      summary: 서비스 추가 API
      tags:
        - User
  /v1/user/services:
    get:
      consumes:
        - application/json
      description: 액세스 토큰 기반하여 유저 검색 후 등록한 서비스 조회 API 입니다.
      parameters:
        - description: 액세스 토큰
          in: header
          name: Authorization
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      summary: 등록한 서비스 조회 API
      tags:
        - User
  /v1/user/wallet/{type}:
    post:
      consumes:
        - application/json
      description: 지갑 등록 API 입니다.
      parameters:
        - description: 액세스 토큰
          in: header
          name: Authorization
          required: true
          type: string
        - description: 지갑 등록 타입 soft, hard
          in: path
          name: type
          required: true
          type: string
        - description: soft wallet 등록 시 필요한 body 값
          in: body
          name: softWallet
          schema:
            $ref: "#/definitions/model.AddSoftWallet"
        - description: hard wallet 등록 시 필요한 body 값
          in: body
          name: hardWallet
          schema:
            $ref: "#/definitions/model.AddHardWallet"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      summary: 지갑 등록 API
      tags:
        - User
schemes:
  - http
swagger: "2.0"
